/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.openjpa.integration.osgi.itests;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.ops4j.pax.exam.CoreOptions.felix;
import static org.ops4j.pax.exam.CoreOptions.mavenConfiguration;
import static org.ops4j.pax.exam.CoreOptions.options;
import static org.ops4j.pax.exam.CoreOptions.systemProperty;
import org.ops4j.pax.exam.Option;
import org.ops4j.pax.exam.OptionUtils;
import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.profile;
import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
import org.ops4j.pax.exam.junit.JUnit4TestRunner;
import org.osgi.framework.Bundle;


@RunWith(JUnit4TestRunner.class)
public class TestOpenJPA extends AbstractIntegrationTest {

    @Test
    public void testExamples() throws Exception {
        System.out.println("********** testExamples starting");
        System.out.println("***** Checking that openjpa-examples is installed");
        // check for our openjpa-examples via the SymbolicName
        Bundle bundle = getInstalledBundle("org.apache.openjpa.openjpa-examples");
        assertNotNull(bundle);
        System.out.println("***** Starting openjpa-examples bundle");
        bundle.start();
        System.out.println("***** Stopping openjpa-examples bundle");
        bundle.stop();
        System.out.println("********** testExamples returning");
    }
    
    @Test
    public void testEMF() throws Exception {
        System.out.println("********** testEMF starting");
        System.out.println("***** Creating a EMF");
        EntityManagerFactory emf = Persistence.
            createEntityManagerFactory("hellojpa", System.getProperties());
        assertNotNull(emf);
        System.out.println("***** After createEMF");
        //OpenJPAConfiguration conf = emf.getConfiguration();
        //System.out.println("***** After Config *****");
        //assertNotNull(conf);
        System.out.println("********** testEMF returning");
    }

    @org.ops4j.pax.exam.junit.Configuration
    public static Option[] configuration() {
        Option[] options = options(
            // Log
            mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
            mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
            // Felix Config Admin
            mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
            // Maven url handler
            mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),

            // this is how you set the default log level when using pax logging
            systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level")
                .value("DEBUG"),

            // OpenJPA runtime depends
            mavenBundle("org.apache.geronimo.specs", "geronimo-jpa_2.0_spec"),
            mavenBundle("org.apache.geronimo.specs",
                "geronimo-validation_1.0_spec"),
            //mavenBundle("org.apache.geronimo.specs", "geronimo-jms_1.1_spec"),
            //mavenBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec"),
            mavenBundle("commons-collections", "commons-collections"),
            mavenBundle("commons-lang", "commons-lang"),
            mavenBundle("commons-pool", "commons-pool"),
            mavenBundle("org.apache.openjpa", "openjpa"),
            
            // Testcase depends
            mavenBundle("org.apache.derby", "derby"),
            mavenBundle("org.apache.servicemix.bundles",
                "org.apache.servicemix.bundles.commons-dbcp"),
            mavenBundle("org.apache.openjpa", "openjpa-examples"),
            //vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,
            //server=y,suspend=y,address=5005"),

            felix() //, equinox(), knopflerfish()
        );

        // use config generated by the Maven plugin (until PAXEXAM-62/64 fixed)
        if (TestOpenJPA.class.getClassLoader().getResource(
                "META-INF/maven/paxexam-config.args") != null) {
            options = OptionUtils.combine(options, mavenConfiguration());
        }

        return options;
    }
}

