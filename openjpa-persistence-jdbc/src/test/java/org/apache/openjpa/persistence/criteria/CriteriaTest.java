/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.openjpa.persistence.criteria;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.Persistence;
import javax.persistence.PersistenceException;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.QueryBuilder;

import junit.framework.TestCase;

import org.apache.openjpa.jdbc.conf.JDBCConfiguration;
import org.apache.openjpa.jdbc.sql.DBDictionary;
import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;
import org.apache.openjpa.lib.jdbc.JDBCEvent;
import org.apache.openjpa.lib.jdbc.JDBCListener;
import org.apache.openjpa.lib.jdbc.ReportingSQLException;
import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;
import org.apache.openjpa.persistence.OpenJPAPersistence;
import org.apache.openjpa.persistence.test.AllowFailure;


/**
 * Generic utility to run Criteria tests. 
 * 
 * Provides facility to compare the target SQL generated by good old JPQL
 * and newly minted Criteria.
 * 
 */
public abstract class CriteriaTest extends TestCase {
    protected static OpenJPAEntityManagerFactorySPI emf;
    QueryBuilder cb;
    EntityManager em;
    protected List<String> sql = new ArrayList<String>();
    protected static Class[] CLASSES = {
    Account.class,
    Address.class,
    A.class,
    B.class,
    CompUser.class,
    Contact.class,
    Contractor.class,
    Course.class,
    CreditCard.class,
    Customer.class,
    C.class,
    Department.class,
    DependentId.class,
    Dependent.class,
    D.class,
    Employee.class,
    Exempt.class,
    FemaleUser.class,
    FrequentFlierPlan.class,
    Item.class,
    LineItem.class,
    Magazine.class,
    MaleUser.class,
    Manager.class,
    Movie.class,
    Order.class,
    Person.class,
    Phone.class,
    Photo.class,
    Product.class,
    Publisher.class,
    Semester.class,
    Student.class,
    TransactionHistory.class,
    Transaction.class,
    VideoStore.class};
    
    protected Class[] getDomainClasses() {
        return CLASSES;
    }
    
    public void setUp() {
        if (emf == null) {
            createNamedEMF(getDomainClasses());
            assertNotNull(emf);
            setDictionary();
        }
        em = emf.createEntityManager();
        cb = emf.getQueryBuilder();
    }
    /**
     * Create an entity manager factory for persistence unit <code>pu</code>.
     * Put {@link #CLEAR_TABLES} in
     * this list to tell the test framework to delete all table contents
     * before running the tests.
     *
     * @param props list of persistent types used in testing and/or
     * configuration values in the form key,value,key,value...
     */
    protected void createNamedEMF(Class<?>... types) {
        Map map = new HashMap();
        map.put("openjpa.jdbc.SynchronizeMappings",
                "buildSchema(ForeignKeys=true," 
              + "SchemaAction='add,deleteTableContents')");
        map.put("openjpa.DynamicEnhancementAgent", "false");
        map.put("openjpa.jdbc.JDBCListeners", 
                new JDBCListener[] { new Listener() });
        
            StringBuffer buf = new StringBuffer();
            for (Class<?> c : types) {
                if (buf.length() > 0)
                    buf.append(";");
                buf.append(c.getName());
            }
           
            map.put("openjpa.MetaDataFactory",
                "jpa(Types=" + buf.toString() + ")");
        
            Map config = new HashMap(System.getProperties());
            config.putAll(map);
            emf = (OpenJPAEntityManagerFactorySPI) 
                Persistence.createEntityManagerFactory("test", config);
    }

    public final void tearDown() {
        // important: do nothing
    }

    void setDictionary() {
        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();
        DBDictionary dict = conf.getDBDictionaryInstance();
        dict.requiresCastForComparisons = false;
        dict.requiresCastForMathFunctions = false;
    }

    /**
     * Executes the given CriteriaQuery and JPQL string and compare their
     * respective SQLs for equality.
     */
    void assertEquivalence(CriteriaQuery c, String jpql, String[] paramNames,
            Object[] params) {
        Query cQ = em.createQuery(c);
        for (int i = 0; i < paramNames.length; i++) {
            cQ.setParameter(paramNames[i], params[i]);
        }
        Query jQ = em.createQuery(jpql);
        for (int i = 0; i < paramNames.length; i++) {
            jQ.setParameter(paramNames[i], params[i]);
        }
        executeAndAssert(cQ, jQ);
    }

    /**
     * Executes the given CriteriaQuery and JPQL string and compare their
     * respective SQLs for equality.
     */

    void assertEquivalence(CriteriaQuery c, String jpql, Object[] params) {
        Query cQ = em.createQuery(c);
        for (int i = 0; i < params.length; i++) {
            cQ.setParameter(i + 1, params[i]);
        }
        
        Query jQ = em.createQuery(jpql);
        for (int i = 0; i < params.length; i++) {
            jQ.setParameter(i + 1, params[i]);
        }
        
        executeAndAssert(cQ, jQ);
    }

    void assertEquivalence(CriteriaQuery c, String jpql) {
        executeAndAssert(em.createQuery(c), em.createQuery(jpql));
    }

    void executeAndAssert(Query cQ, Query jQ) {
        List<String>[] sqls = new ArrayList[2];
        String jpql = OpenJPAPersistence.cast(jQ).getQueryString();
        if (!execute(jpql, cQ, jQ, sqls)) {
            fail(sqlReport("Invalid SQL for Criteria",jpql, sqls[0], sqls[1]));
        }
        assertEquals(sqlReport("Unequal number of SQL ",jpql, sqls[0], sqls[1]) 
              , sqls[0].size(), sqls[1].size());
        for (int i = 0; i < sqls[0].size(); i++)
            //sqlReport("Wrong SQL at " + i,jpql, sqls[0], sqls[1]),
           assertEquals(
                sqls[0].get(i), sqls[1].get(i));
    }

    /**
     * Execute the two given queries. The first query originated from a JPQL
     * string must be well-formed. The second query originated from a Criteria
     * is being tested.
     * 
     * @param sqls The target SQL for the queries will be filled-in the given
     *            array.
     * @return true if both queries execute successfully.
     */
    boolean execute(String jpql, Query cQ, Query jQ, List<String>[] sqls) {
        sql.clear();
        try {
            List jList = jQ.getResultList();
        } catch (PersistenceException e) {
            e.printStackTrace();
            sqls[0] = new ArrayList<String>();
            sqls[0].add(extractSQL(e));
            fail("JPQL :" + jpql + "\r\nSQL  :" + sqls[0]);
        } catch (Exception e) {
            e.printStackTrace();
            fail("JPQL :" + jpql);
        }
        
        sqls[0] = new ArrayList<String>(sql);

        sql.clear();
        try {
            List cList = cQ.getResultList();
        } catch (PersistenceException e) {
            e.printStackTrace();
            sqls[1] = new ArrayList<String>();
            sqls[1].add(extractSQL(e));
            return false;
        }
        sqls[1] = new ArrayList<String>(sql);

        return true;
    }

    String extractSQL(PersistenceException e) {
        Throwable t = e.getCause();
        if (t instanceof ReportingSQLException)
            return ((ReportingSQLException) t).getSQL();
        return null;
    }
    
    private String sqlReport(String header, String jpql, List<String> jSQLs, 
            List<String> cSQLs) {
        StringBuffer tmp = new StringBuffer(header).append("\r\n")
            .append("JPQL:["+jpql+"]").append("\r\n");
        tmp.append(jSQLs.size() + " target SQL for JPQL").append("\r\n");
        for (String s : jSQLs)
            tmp.append(s).append("\r\n");
        tmp.append(cSQLs.size() + " target SQL for Critera").append("\r\n");
        for (String s : cSQLs)
            tmp.append(s).append("\r\n");
        return tmp.toString();
    }
    
    @Override
    public void runBare() throws Throwable {
        try {
            super.runBare();
        } catch (Throwable t) {
            AllowFailure allowFailure = getAllowFailure();
            if ( allowFailure != null && allowFailure.value()) {
                System.err.println("*** FAILED (but ignored): " + this);
                System.err.println("***              Reason : " 
                    + allowFailure.message());
                System.err.println("Stacktrace of failure");
                t.printStackTrace();
            } else {
                throw t;
            }
        }
    }
    
    /**
     * Affirms if the test case or the test method is annotated with 
     * @AllowFailure. Method level annotation has higher precedence than Class
     * level annotation.
     */
    protected AllowFailure getAllowFailure() {
        try {
            Method runMethod = getClass().getMethod(getName(), (Class[])null);
            AllowFailure anno = runMethod.getAnnotation(AllowFailure.class);
            if (anno != null)
                return anno;
        } catch (SecurityException e) {
            //ignore
        } catch (NoSuchMethodException e) {
            //ignore
        }
        return getClass().getAnnotation(AllowFailure.class);
    }

    
    public class Listener
    extends AbstractJDBCListener {

    @Override
    public void beforeExecuteStatement(JDBCEvent event) {
        if (event.getSQL() != null && sql != null) {
            sql.add(event.getSQL());
        }
    }
}
}
