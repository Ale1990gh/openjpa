<?xml version="1.0" encoding="UTF-8"?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at
 
 http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
-->
<appendix id="migration_considerations" role="non-normative">
    <title>
        Migration Considerations
    </title>
    <section id="jpa_2.0">
        <title>
            JPA 2.0
        </title>
        <section id="jpa_2.0_incompatibilities">
            <title>
                Incompatibilities
            </title>
            <!-- See OPENJPA-1208 for details. -->
            <para>
                The following sections indicate changes that are incompatible
                between OpenJPA 1.x.x releases and the 2.0 release. Some may
                require application changes. Others can be remedied through the
                use of compatibility options.  If your application uses a
                version 1.0 persistence.xml, compatibility options will be set
                appropriately to maintain backward compatibility.  OpenJPA 2.0
                applications using a version 2.0 persistence.xml and require
                OpenJPA 1.x.x compatibility may need to configure the
                appropriate compatibility options to get the desired behavior.
            </para>
            <section id="getProperties">
                <title>
                    getProperties()
                </title>
                <!-- See OPENJPA-849 for details. -->
                <para>
                    The OpenJPAEntityManagerFactory interface getProperties()
                    method was changed to return a Map instead of a
                    Properties object. This change was made in order to
                    support the getProperties() method defined in the 2.0
                    JPA specification.
                </para>
            </section>
            <section id="migration_detach_behavior">
                <title>
                    Detach Behavior
                </title>
                <!-- See OPENJPA-1215 for details. -->
                <para>
                    The detach behavior has changed in several ways:
                    <itemizedlist>
                        <listitem>
                            <para>
                                In the 1.x.x release, managed entities
                                were flushed to the database as part of the
                                detach operation. This is no longer done in
                                2.0.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                In the 1.x.x release, entities were copied
                                and returned. In 2.0, for those methods
                                that have return values, the original
                                entities are returned.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                In the 1.x.x release, managed entities still
                                exist in the persistent context. In 2.0,
                                they are removed.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                In the 1.x.x release, the detach operation
                                is recursively cascaded to all referenced
                                entities. In 2.0, the detach operation is
                                only cascade to those entities for which
                                Cascade=detach has been specified.
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>
                    Applications that use a 1.0 persistence.xml will
                    automatically maintain OpenJPA 1.0 behavior.  It is
                    possible for a version 2.0 application to revert back to
                    the 1.x.x behavior for some of these items by setting the
                    openjpa.Compatibility property as follows:
                    <simplelist>
                        <member>CopyOnDetach=true</member>
                        <member>FlushBeforeDetach=true</member>
                        <member>CascadeWithDetach=true</member>
                    </simplelist>
                </para>
                <para>
                    In addition, a new method has been provided on the
                    <ulink url="../javadoc/org/apache/openjpa/persistence/OpenJPAEntityManager.html">
                    <classname>OpenJPAEntityManager</classname></ulink>
                    interface to return a copy of the entity:
                    <programlisting>
    public &lt;T&gt; T detachCopy(T pc):
                    </programlisting>
                </para>
            </section>
            <section id="private_persistent_properties">
                <title>
                    Use of private persistent properties
                </title>
                <!-- See OPENJPA-1176 for details. -->
                <para>
                    In 1.x.x releases of OpenJPA, if property access was used,
                    private properties were considered persistent. This is 
                    contrary to the JPA specification, which states that 
                    persistent properties must be public or protected.  In
                    OpenJPA 2.0 and later, private properties will not be 
                    persistent by default.
                </para>
                <para>
                    Applications that use a 1.0 persistence.xml will
                    automatically maintain OpenJPA 1.x.x behavior. It is
                    possible for a version 2.0 application to revert back to
                    the 1.x.x behavior by setting the value of the
                    <literal>openjpa.Compatibility</literal> 
                    property <literal>PrivatePersistentProperties</literal> to 
                    <literal>true</literal>.  If compile time enhancement is 
                    used, this property must be specified at the time of 
                    enhancement and at runtime.
                </para>
            </section>
            <section id="setParameters">
                <title>
                    Query.setParameteres()
                </title>
                <!-- See OPENJPA-1213 for details. -->
                <para>
                    The Query interface setParameters() method behavior has
                    changed to throw an IllegalArgumentException if more
                    parameter substitutions are supplied than defined in the
                    createQuery() or createNamedQuery() call, as required by
                    the JPA2 specification.
                    OpenJPA 1.2.x and prior versions would silently ignore the
                    supplied parameter substitutions and allow the Query to be
                    processed.
                </para>
            </section>
            <section id="serialization">
                <title>
                    Serialization of Entities
                </title>
                <!-- See OPENJPA-1097 and OPENJPA-1597 for details. -->
                <para>
                    In 1.x.x releases of OpenJPA, when an entity was serialized
                    after calling EntityManager.find(), detach() or detachAll()
                    then all <xref linkend="ref_guide_pc_scos_proxy"/>
                    references were removed as expected, but when the same
                    entity instance was serialized after calling
                    EntityManager.clear() the proxy classes were not removed.
                </para>
                <para>
                    This has two side-effects:
                    when entities are remoted across JVM boundaries (RPC)
                    or deserialized the OpenJPA runtime must be available
                    on the classpath (both client and server containers);
                    when entities are deserialized the OpenJPA runtime must
                    be the exact same revision as used to serialize the
                    entities due to the $proxy classes using dynamically
                    generated serialVersionUID values.
                </para>
                <para>
                    Starting with OpenJPA 2.0, this behavior has been
                    modified, so that by default all proxies will be removed
                    during serialization.  See 
                    <xref linkend="ref_guide_pc_scos_proxy_serial"/> 
                    on how the behavior changes based on the 
                    <literal>DetachedStateField</literal> setting along with 
                    <xref linkend="ref_guide_detach_state"/> 
                    for more details on how to override the default
                    <literal>DetachedStateField</literal> setting.
                </para>
                <para>
                    Applications that use a 1.0 persistence.xml will
                    automatically maintain the old behavior.  It is
                    possible for a version 2.0 application to revert back to
                    the prior 1.x.x behavior by setting the following
                    openjpa.Compatibility property as follows:
                    <simplelist>
                        <member>IgnoreDetachedStateFieldForProxySerialization=true</member>
                    </simplelist>
                </para>
            </section>
            <section id="QuerySQLCache">
                <title>
                    openjpa.jdbc.QuerySQLCache
                </title>
                <!-- See OPENJPA-1179 for details. -->
                <para>
                    In prior 1.x.x releases, the openjpa.jdbc.QuerySQLCache
                    configuration property for Prepared SQL Cache accepted
                    value <literal>all</literal> to never drop items from the
                    cache, but this option is no longer supported and will cause
                    a PersistenceException with a root cause of a ParseException
                    to be thrown.  See 
                    <xref linkend="ref_guide_cache_querysql"/>
                    for details on the available configuration values.
                </para>
            </section>
        </section>
        <section id="Disabling AutoOff Collection Tracking">
            <title>
                Disabling AutoOff Collection Tracking
            </title>
            <!-- See OPENJPA-1223 and OPENJPA-1163 for details. -->
            <para>
                The default behavior of openJPA in tracking collections is that
                if the number of modifications to the collection exceeds the
                current number of elements in collection then openJPA will
                disable tracking the collections.  Added a Compatibility
                property to disable turning off the collection tracking.
            </para>
            <para>
                The behavior of Auto disabling of collection tracking can be
                avoided by setting the value of the
                <literal>openjpa.Compatibility</literal> property
                <literal>autoOff</literal> to  <literal>false</literal>.
                The default behavior of auto disabling the collection tracking
                is not changed. But when the above property is set then the
                collection tracking will not be disabled automatically.
            </para>
        </section>
        <section id="internal_differences">
            <title>
                Internal Behavioral Differences
            </title>
            <para>
                The following sections indicate internal changes between
                OpenJPA 1.x.x releases and the 2.0 release. As these are
                internal implementation specific behaviors not covered by
                the JPA specification, no changes should be required for
                applications that did not use or depend upon OpenJPA specific
                APIs or behavior.
            </para>
            
            <section id="prePostUpdate">
                <title>
                    PreUpdate/PostUpdate Life Cycle Callbacks
                </title>
                <!-- See OPENJPA-1182 for details. -->
                <para>
                    If an entity was updated between the persist()
                    and commit() operations in OpenJPA 1.x, then 
                    any PreUpdate and PostUpdate life cycle callback
                    methods would be executed.  Starting in OpenJPA
                    1.3 and 2.0, these callbacks will not get executed.
                </para>
                <para>
                    The JPA 2.0 specification section on "Semantics
                    of the Life Cycle Callback Methods for Entities"
                    has been updated to include a Note that the
                    callback behavior for updating an entity after
                    the persist operation is implementation specific
                    and should not be relied upon.
                </para>
            </section>
            <section id="createemf">
                <title>
                    createEntityManagerFactory Exceptions
                </title>
                <!-- See OPENJPA-1203 for details. -->
                <para>
                    The JPA 2.0 specification section on
                    "Bootstrapping in Java SE Environments" states
                    that persistence providers must return null
                    if they are not a qualified provider for the 
                    given persistence unit.
                </para>
                <para>
                    However, OpenJPA may throw a RuntimeException
                    if an error occurs while trying to create a
                    qualified persistence unit, like for invalid
                    openjpa.* specific configuration settings or
                    for schema validation failures.
                </para>
                <para>
                    If the Apache Geronimo JPA 2.0 Spec APIs are
                    used, then any exceptions returned by a
                    persistence provider will be wrapped within
                    a PersistenceException.  When the JPA 2.0 API
                    reference implementation is used, any
                    RuntimeExceptions will be returned to the
                    calling application without being wrapped.
                    Other JPA 2.0 API and implementation providers
                    or versions may behave differently.
                </para>
            </section>
            <section id="querycache">
                <title>
                    openjpa.QueryCache default
                </title>
                <!-- See OPENJPA-1469 and sub-tasks for details. -->
                <para>
                    In previous releases, the default value for the
                    openjpa.QueryCache property was <literal>true</literal>
                    when the openjpa.DataCache was enabled.  Depending on
                    application characteristics, this default QueryCache
                    enablement actually could negate much of the potential
                    gains achieved by using the DataCache.  Thus, the default
                    value for the openjpa.QueryCache property will now by
                    <emphasis><literal>false</literal></emphasis>.
                </para>
                <para>
                    To re-enable the default QueryCache behavior, you need to
                    include the following property in your persistence.xml
                    configuration.
                    <programlisting>
    &lt;property name="openjpa.QueryCache" value="true"/&gt;
                    </programlisting>
                </para>
                <para>
                    If your configuration had previously enabled the QueryCache
                    explicitly, then you might have to include the
                    <literal>true</literal> value into your configuration
                    (if you relied on the previous default).  Otherwise, your
                    current QueryCache enablement will continue to work.
                    <programlisting>
    &lt;property name="openjpa.QueryCache" value="true(CacheSize=1000, SoftReferenceSize=100)"/&gt;
                    </programlisting>
                </para>
            </section>
        </section>
    </section>
	<section id="jpa_2.1">
        <title>
            JPA 2.1
        </title>
        <section id="jpa_2.1_changes_in_behavior">
        	<title>Internal Behavioral Differences</title>
        	<para>
	The following sections indicate behavior that has changed from the 2.0
	release to the 2.1 release.
        	</para>
        	<section id="finder_cache_statistics">
        		<title>FinderCache CacheStatistics</title>
        		<para>
	In the 2.0 release CacheStatistics were collected by default. In the
	2.1 release collection of statistics is disabled by default. The
	following property enables statistics collection.
	<programlisting>
&lt;property name="openjpa.jdbc.FinderCache" value="true(EnableStats=true)"/&gt;
	</programlisting>    		
        		</para>
        	</section>
        </section>
	</section>    
</appendix>
